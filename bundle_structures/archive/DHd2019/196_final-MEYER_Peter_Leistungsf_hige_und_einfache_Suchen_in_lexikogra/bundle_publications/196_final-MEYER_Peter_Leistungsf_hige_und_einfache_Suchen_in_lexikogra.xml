<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:id="196_final-MEYER_Peter_Leistungsf_hige_und_einfache_Suchen_in_lexikogra" xmlns="http://www.tei-c.org/ns/1.0">
    <teiHeader>
        <fileDesc>
            <titleStmt>
                <title type="full">
                    <title type="main">Leistungsfähige und einfache Suchen in lexikografischen Datennetzen</title>
                    <title type="sub">Ein interaktiv-visueller Query Builder für Property-Graphen</title>
                </title>
                <author>
                    <persName>
                        <surname>Meyer</surname>
                        <forename>Peter</forename>
                    </persName>
                    <affiliation>Institut für Deutsche Sprache, Deutschland</affiliation>
                    <email>meyer@ids-mannheim.de</email>
                </author>
            </titleStmt>
            <editionStmt>
                <edition>
                    <date>2019-01-02T15:23:00Z</date>
                </edition>
            </editionStmt>
            <publicationStmt>
                <t:publisher xmlns:t="http://www.tei-c.org/ns/1.0">Patrick Sahle, im Auftrag des Verbands Digital Humanities im deutschsprachigen Raum e.V.</t:publisher>
                <t:address xmlns:t="http://www.tei-c.org/ns/1.0">
                    <t:addrLine>Universität zu Köln</t:addrLine>
                    <t:addrLine>Cologne Center for eHumanities</t:addrLine>
                    <t:addrLine>Albertus-Magnus-Platz</t:addrLine>
                    <t:addrLine>50923 Köln</t:addrLine>
                </t:address>
            </publicationStmt>
            <sourceDesc>
                <p>Converted from a Word document</p>
            </sourceDesc>
        </fileDesc>
        <encodingDesc>
            <appInfo>
                <application ident="DHCONVALIDATOR" version="1.22">
                    <label>DHConvalidator</label>
                </application>
            </appInfo>
        </encodingDesc>
        <profileDesc>
            <textClass>
                <keywords scheme="ConfTool" n="category">
                    <term>Paper</term>
                </keywords>
                <keywords scheme="ConfTool" n="subcategory">
                    <term>Posterpräsentation</term>
                </keywords>
                <keywords scheme="ConfTool" n="keywords">
                    <term>Property-Graph</term>
                    <term>Computerlexikografie</term>
                    <term>Abfragewerkzeug</term>
                </keywords>
                <keywords scheme="ConfTool" n="topics">
                    <term>Programmierung</term>
                    <term>Netzwerkanalyse</term>
                    <term>Daten</term>
                    <term>Sprache</term>
                    <term>Software</term>
                </keywords>
            </textClass>
        </profileDesc>
    </teiHeader>
    <text>
        <body>
            <div type="div1" rend="DH-Heading1">
                <head>Einleitung: Property-Graphen für lexikografische Ressourcen</head>
                <p style="text-align:left; ">Klassische XML-basierte lexikografische Ressourcen können durch Graphenstrukturen mit zusätzlichen Vernetzungen und Informationen angereichert werden 
                (Měchura 2016).<ref target="ftn1" n="1"/> Dabei werden die Artikel eines Wörterbuchs zunächst durch eigenständige XML-Dokumente repräsentiert; bestimmte XML-Elemente in diesen Dokumenten – die in typischen Anwendungsfällen z.B. den im Artikel gebuchten Wörtern oder deren Bedeutungsdefinitionen entsprechen – können dann zusätzlich in einer Graphdatenbank für Property-Graphen (vgl. Robinson / Eifrem / Webber 2013) durch Knoten verschiedener Typen repräsentiert werden. Im Redaktionsprozess können auch z.B. weitere Knoten hinzugefügt werden, um zusätzliche Information abzubilden. Kanten zwischen solchen Knoten können nicht nur bereits vorhandene relationale Informationen aus den Quelldokumenten, sondern auch zusätzliche, insbesondere auch dokumentübergreifende, Relationen zum Ausdruck bringen. Der resultierende Graph fungiert dann als ausdrucksstarke zusätzliche Navigations- und Repräsentationsebene.
                </p>
            </div>
            <div type="div1" rend="DH-Heading1">
                <head>Ein Query Builder für die Graphensuche</head>
                <p style="text-align:left; ">Lexikograf/innen ebenso wie Endnutzer/innen einer solchen Ressource benötigen eine Zugriffsstruktur, die Suchen nach komplexen Konstellationen in solchen Graphen ermöglicht. Für Graphendatenbanken stehen zahlreiche Abfragesprachen zur Verfügung, deren Verwendung jedoch sehr voraussetzungsreich ist. Die Entwicklung von interaktiv-visuellen Systemen zur endnutzerfreundlichen Graphenabfrage ist aktuelles Forschungsgebiet (vgl. z.B. Bhowmick / Choi / Li 2018; Pienta / Navathe / Tamersoy / Tong / Endert / Chau 2016).</p>
                <p style="text-align:left; ">Als eine auf die Bedürfnisse der digitalen Lexikografie zugeschnittene, sich insbesondere auch an interessierte Endnutzer sowie Lexikografen ohne IT-Vorkenntnisse richtende Lösung präsentiert das Poster einen visuellen Query Builder, der von den Komplexitäten der in vielen gängigen Property-Graphendatenbanksystemen implementierten Open Source-Abfragesprache Apache TinkerPop Gremlin (Rodriguez 2015; http://tinkerpop.com) 
                abstrahiert.<ref target="ftn2" n="2"/> Das Poster illustriert die Verwendung des Systems anhand einer Datenbank zu lexikalischen Entlehnungen aus dem Deutschen in andere Sprachen, die die mitunter verwickelten Entlehnungswege von Wörtern als Pfade in einem Graphen abbildet.
                </p>
                <p style="text-align:left; ">Abfragen werden im Browser durch das visuelle Zusammenstellen eines Baumes von Abfragekomponenten erzeugt, die Eigenschaften von Knoten beschreiben. Die so erstellten Abfragen sind zu jedem Zeitpunkt semantisch konsistent. Nach jeder Änderung an der Abfrage wird diese serverseitig in einer für Administratoren frei konfigurierbaren Weise in eine Gremlin-Graphtraversierungsanweisung umgesetzt und die Suchresultate in Echtzeit zurückgegeben. Angesichts der Mächtigkeit von Gremlin und der Möglichkeit, Traversierungen mit beliebigen Seiteneffekten zu verknüpfen, ist die direkte, manuelle Eingabe von Gremlin-Anweisungen nur in einer separaten, für Administratoren bestimmten Konsole möglich.</p>
                <p style="text-align:left; ">Im allgemeinen Fall werden 
                    <hi rend="italic">n</hi>-Tupel von Knoten gesucht, die bestimmte Attribute aufweisen und zwischen denen nutzerdefinierte Pfade bestehen sollen. Entsprechend werden die Resultate tabellarisch als sortierbare 
                    <hi rend="italic">n</hi>-Tupel präsentiert. 
                </p>
                <figure>
                    <graphic n="1001" width="16.002cm" height="9.662583333333334cm" url="196_final-b14146ec5c08d3d2f729007ff97a380c.png" rend="inline"/>
                    <head>
                        <lb/>Abbildung 1. Beispiel für eine Query Builder-Suchanfrage in einem lexikografischen Netzwerk für Entlehnungsbeziehungen: Suche polnische Substantive, die als Lehnwort ohne Genuswechsel ins Ukrainische gewandert sind, wobei das Lehnwort oder eine Ableitung dazu nicht vor 1950 belegt ist.
                    </head>
                </figure>
            </div>
            <div type="div1" rend="DH-Heading1">
                <head>Komplexere Abfragen</head>
                <p style="text-align:left; ">Eine Relation zwischen zwei Knoten (z.B. direkte Kante mit einem bestimmten Attribut; ein Pfad mit maximal 3 Kanten; ein Pfad beliebiger Länge) wird in einer speziellen Abfragekomponente als "relationales Quasi-Attribut" eines der beiden Knoten eingegeben; die weiteren Eigenschaften des jeweils anderen Knoten erscheinen dann auf der hierarchisch nächsttieferen Ebene unterhalb dieser Abfragekomponente, wie aus Abb. 1 ersichtlich. Das Kombinieren von Suchkriterien durch eine Boolesche Abfragekomponente ist nicht nur für echte Knotenattribute, sondern auch für solche relationalen Quasiattribute erlaubt. So sind alternative oder verbotene Pfade beschreibbar, die in Gremlin als Sub-Traversierungsroutinen verarbeitet werden müssen und in einer rein graphischen visuellen Metapher nicht mehr ohne weiteres darstellbar wären. Referenzieren anderer Knoten ist über ein sich automatisch aktualisierendes Nummerierungsschema möglich, um Sachverhalte wie "Knoten B hat einen anderen Wert für Attribut X als Knoten A" oder auch Zyklen und andere nicht-baumartige Konstellationen im Graph auszudrücken.</p>
                <p style="text-align:left; ">Schon bei kleinen Graphen können komplexere Abfragen leicht zu nicht akzeptablen Suchlaufzeiten führen (vgl. Wood 2012; Bonifati / Fletcher / Voigt / Yakovets 2018), die über Zeitbeschränkungen in der Graphtraversierung gekappt werden müssen. Durch geeignete Maßnahmen kann in vielen Fällen die Existenz weiterer Suchergebnisse festgestellt und autorisierten Nutzern über eine Warteschlange die Möglichkeit gegeben werden, ihre Suchabfrage vollständig abarbeiten zu lassen.</p>
                <p style="text-align:left; ">Für jedes gefundene Knoten-
                    <hi rend="italic">n</hi>-Tupel kann ein sie enthaltender Ausschnitt (Subgraph) des Gesamtgraphen angezeigt und bei entsprechender Autorisierung von lexikografischen Bearbeitern in einem frei konfigurierbaren Editor visuell redigiert werden (vgl. Abb. 2).
                </p>
                <figure>
                    <graphic n="1002" width="16.002cm" height="9.916583333333334cm" url="196_final-7c6c141ad7d703c2ad07bcc57a07586c.png" rend="inline"/>
                    <head>
                        <lb/>Abbildung 2. Suchergebnis mit passendem Ausschnitt aus dem Graphen und Editorfunktionalität.
                    </head>
                </figure>
            </div>
        </body>
        <back>
            <div type="notes">
                <note xml:id="ftn1" n="1" rend="footnote text">
                    Die im Umfeld von Linked (Open) Data verwendeten Verfahren (vgl. Gracia / Kernerman / Bosque-Gil 2017) verwenden üblicherweise Graphendarstellungen lexikografischer Daten im RDF-Format, für die das hier vorgestellte, speziell für Property-Graphen und deren Abfragesprache Gremlin entwickelte Werkzeug nicht geeignet ist. Viele Arbeiten zu nutzerfreundlichen Suchwerkzeugen auf RDF-Netzen (z.B. Ferré 2017) sind jedoch für die hier behandelte Problematik sehr wohl von grundsätzlichem Interesse, weil sie in vergleichbarer Weise eine endnutzerfreundliche Zugriffsschicht über die RDF-Abfragesprache SPARQL legen.
                </note>
                <note xml:id="ftn2" n="2" rend="footnote text">
                    Der Query Builder ist Komponente eines derzeit in Entwicklung befindlichen Open-Source-Softwaresystems zur Verwaltung und Online-Publikation graph-erweiterter lexikografischer Ressourcen (Meyer / Eppinger 2018), das im Rahmen des von der Fritz Thyssen Stiftung geförderten Projektes "Das Lehnwortportal Deutsch als Forschungs- und Publikationsplattform" entwickelt wird.
                </note>
            </div>
            <div type="bibliogr">
                <listBibl>
                    <head>Bibliographie</head>
                    <bibl>
                        <hi rend="bold">Bhowmick, Sourav S. / Choi, Byron / Li, Chengkai (2018)</hi>: <hi rend="italic">Human Interaction with Graphs: A Visual Querying Perspective</hi>. San Rafael, CA: Morgan &amp; Claypool Publishers.
                    </bibl>
                    <bibl>
                        <hi rend="bold">Bonifati, Angela / Fletcher, George / Voigt, Hannes / Yakovets, Nikolay (2018)</hi>: <hi rend="italic">Querying Graphs</hi>. San Rafael, CA: Morgan &amp; Claypool Publishers. 
                    </bibl>
                    <bibl>
                        <hi rend="bold">Ferré, Sébastien (2017)</hi>: <hi rend="italic">"Sparklis: An Expressive Query Builder for SPARQL Endpoints with Guidance in Natural Language“</hi>, in: Semantic Web: Interoperability, Usability, Applicability 8(3): 405-418.
                    </bibl>
                    <bibl>
                        <hi rend="bold">Gracia, Jorge / Kernerman, Ilan / Bosque-Gil, Julia (2017)</hi>: <hi rend="italic">"Toward Linked Data-Native Dictionaries“</hi>, in: <hi rend="bold">Kosem, Iztok / Tiberius, Carole / Jakubíček, Miloš / Kallas, Jelena / Krek, Simon / Baisa, Vít (eds.)</hi>:<hi rend="italic"> Electronic lexicography in the 21st century. Proceedings of eLex 2017 conference</hi>. Brno: Lexical Computing 550-559 https://elex.link/elex2017/proceedings-download/ [letzter Zugriff 12. Oktober 2018].
                    </bibl>
                    <bibl>
                        <hi rend="bold">Měchura, Michal (2016)</hi>: <hi rend="italic">"Data structures in lexicography: from trees to graphs“</hi>, in: <hi rend="bold">Horák, Aleš / Rychlý, Pavel / Rambousek, Adam (eds.)</hi>: <hi rend="italic">Proceedings of the Tenth Workshop on Recent Advances in Slavonic Natural Languages Processing, RASLAN 2016</hi>. Brno: Tribun EU 97-104.
                    </bibl>
                    <bibl>
                        <hi rend="bold">Meyer, Peter / Eppinger, Mirjam (2018)</hi>: <hi rend="italic">"fLexiCoGraph: Creating and Managing Curated Graph-Based Lexicographical Data"</hi>, in: <hi rend="bold">Čibej, Jaka / Gorjanc, Vojko / Kosem, Iztok / Krek, Simon (eds.)</hi>: <hi rend="italic">Proceedings of the XVIII EURALEX International Congress. Lexicography in Global Contexts, 17-21 July, Ljubljana</hi>. Ljubljana: Znanstvena založba 1017-1022.
                    </bibl>
                    <bibl>
                        <hi rend="bold">Pienta, Robert / Navathe, Shamkant / Tamersoy, Acar / Tong, Hanghang / Endert, Alex / Chau, Duen Horng (2016)</hi>: <hi rend="italic">"VISAGE: Interactive Visual Graph Querying"</hi>, in: AVI: Proceedings of the Workshop on Advanced Visual Interfaces 272–279. 
                    </bibl>
                    <bibl>
                        <hi rend="bold">Robinson, Ian / Eifrem, Emil / Webber, Jim (2013)</hi>: <hi rend="italic">Graph Databases</hi>. Sebastopol, CA: O'Reilly &amp; Associates.
                    </bibl>
                    <bibl>
                        <hi rend="bold">Rodriguez, Marko A. (2015)</hi>: <hi rend="italic">"The Gremlin Graph Traversal Machine and Language"</hi>, in: <hi rend="bold">Cheney, James / Neumann, Thomas (eds.)</hi>: <hi rend="italic">Proceedings of the 15th Symposium on Database Programming Languages (DBPL 2015).</hi> New York: The Association for Computing Machinery 1-10.
                    </bibl>
                    <bibl>
                        <hi rend="bold">Wood, Peter T. (2012)</hi>: <hi rend="italic">"Query Languages for Graph Databases"</hi>, in: SIGMOD Record 41(1): 50-60.
                    </bibl>
                </listBibl>
            </div>
        </back>
    </text>
</TEI>
